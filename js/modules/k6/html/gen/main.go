package main

import (
	"html/template"
	"log"
	"os"
	"path"
	"runtime"
	"strings"
)

const (
	AttrString    = 1
	AttrIsPresent = 2
	href          = "href"
)

// ElemDef *ElementDef
type Attr struct {
	PropertyName string
	AttrType     int
}

type Elem struct {
	NodeName     string
	StructName   string
	StructParent string
	Properties   []Attr
}

var elements = []Elem{
	Elem{"", "HrefElement", "Element", []Attr{
		Attr{"Rel", AttrString},
	}},
	Elem{"Anchor", "AnchorElement", "HrefElement", nil},
	Elem{"Area", "AreaElement", "HrefElement", []Attr{
		Attr{"Href", AttrString},
		Attr{"Target", AttrString},
	}},
	Elem{"Base", "BaseElement", "Element", []Attr{
		Attr{"Target", AttrString},
	}},
	Elem{"Button", "ButtonElement", "Element", []Attr{
		Attr{"AccessKey", AttrString},
		Attr{"Autofocus", AttrIsPresent},
		Attr{"Disabled", AttrIsPresent},
	}},
}

func main() {
	_, file, _, ok := runtime.Caller(0)
	if !ok {
		log.Println("Unable to get current dir")
	}

	f, err := os.Create(path.Join(path.Dir(file), "../elements_gen.go"))
	if err != nil {
		log.Println("warning: internal error: invalid Go generated:", err)
	}
	elemsTemplate.Execute(f, elements)
	f.Close()
}

var elemsTemplate = template.Must(template.New("").Funcs(template.FuncMap{
	"isNode":         hasNodeName,
	"attrReturnType": attrReturnType,
	"attrFuncName":   attrFuncBody,
	"attrName":       attrName,
}).Parse(`// go generate
// generated by js/modules/k6/html/gen/main.go directed by js/modules/k6/html/elements.go;  DO NOT EDIT
package html

func selToElement(sel Selection) goja.Value {
	if sel.sel.Length() == 0 {
		return goja.Undefined()
	}

	elem := Element{sel.sel.Nodes[0], &sel}
	switch elem.node.Data { {{range .}} {{ if isNode . }}
	case {{ .NodeName }}:
		return sel.rt.ToValue({{ .StructName }}{ {{ .StructParent }}{elem} })
	{{ end }} {{end}}
	default:
		return sel.rt.ToValue(elem)
	}
}

{{ range . }}
type {{ .StructName }} struct{ {{ .StructParent }} }
{{ end }}

{{ range . }} 
	{{ $elem := . }} 
	{{ range .Properties }}
func (e {{ $elem.StructName }}) {{ .PropertyName }}() {{ attrReturnType .AttrType }} {
	return e.{{ attrFuncName . }}("{{ attrName . }}");
}
	{{ end }}
{{ end }}
`))

func hasNodeName(elemDef Elem) bool {
	return elemDef.NodeName != ""
}

func attrReturnType(attrType int) string {
	switch attrType {
	case AttrString:
		return "string"

	case AttrIsPresent:
		return "bool"

	default:
		panic("Unknown attrType in a propertyDef")
	}
}

func attrFuncBody(propDef Attr) string {
	switch propDef.AttrType {
	case AttrString:
		return `attrAsString`

	case AttrIsPresent:
		return `attrIsPresent`

	default:
		panic("Unknown attrType in a propertyDef")
	}
}

func attrName(propDef Attr) string {
	return strings.ToLower(propDef.PropertyName)
}
