// go generate
// generated by js/modules/k6/html/gen/main.go directed by js/modules/k6/html/elements.go;  DO NOT EDIT
package html

func selToElement(sel Selection) goja.Value {
	if sel.sel.Length() == 0 {
		return goja.Undefined()
	}

	elem := Element{sel.sel.Nodes[0], &sel}
	switch elem.node.Data {    
	case Anchor:
		return sel.rt.ToValue(AnchorElement{ HrefElement{elem} })
	  
	case Area:
		return sel.rt.ToValue(AreaElement{ HrefElement{elem} })
	  
	case Base:
		return sel.rt.ToValue(BaseElement{ Element{elem} })
	  
	case Button:
		return sel.rt.ToValue(ButtonElement{ Element{elem} })
	 
	default:
		return sel.rt.ToValue(elem)
	}
}


type HrefElement struct{ Element }

type AnchorElement struct{ HrefElement }

type AreaElement struct{ HrefElement }

type BaseElement struct{ Element }

type ButtonElement struct{ Element }


 
	 
	
func (e HrefElement) Rel() string {
	return e.attrAsString("rel");
}
	
 
	 
	
 
	 
	
func (e AreaElement) Href() string {
	return e.attrAsString("href");
}
	
func (e AreaElement) Target() string {
	return e.attrAsString("target");
}
	
 
	 
	
func (e BaseElement) Target() string {
	return e.attrAsString("target");
}
	
 
	 
	
func (e ButtonElement) AccessKey() string {
	return e.attrAsString("accesskey");
}
	
func (e ButtonElement) Autofocus() bool {
	return e.attrIsPresent("autofocus");
}
	
func (e ButtonElement) Disabled() bool {
	return e.attrIsPresent("disabled");
}
	

