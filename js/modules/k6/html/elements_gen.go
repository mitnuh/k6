// go generate
// generated by js/modules/k6/html/gen/main.go directed by js/modules/k6/html/elements.go;  DO NOT EDIT
package html

import "github.com/dop251/goja"

func selToElement(sel Selection) goja.Value {
	if sel.sel.Length() == 0 {
		return goja.Undefined()
	}

	elem := Element{sel.sel.Nodes[0], &sel}

	switch elem.node.Data { 
	case AnchorTagName:
		return sel.rt.ToValue(AnchorElement{HrefElement{elem}})

	case AreaTagName:
		return sel.rt.ToValue(AreaElement{HrefElement{elem}})

	case BaseTagName:
		return sel.rt.ToValue(BaseElement{elem})

	case ButtonTagName:
		return sel.rt.ToValue(ButtonElement{FormFieldElement{elem}})

	case CanvasTagName:
		return sel.rt.ToValue(CanvasElement{elem})

	case DataTagName:
		return sel.rt.ToValue(DataElement{elem})

	case DataListTagName:
		return sel.rt.ToValue(DataListElement{elem})

	case DelTagName:
		return sel.rt.ToValue(DelElement{ModElement{elem}})

	case EmbedTagName:
		return sel.rt.ToValue(EmbedElement{elem})

	case FieldSetTagName:
		return sel.rt.ToValue(FieldSetElement{elem})

	case FormTagName:
		return sel.rt.ToValue(FormElement{elem})

	case IFrameTagName:
		return sel.rt.ToValue(IFrameElement{elem})

	case ImageTagName:
		return sel.rt.ToValue(ImageElement{elem})

	case InputTagName:
		return sel.rt.ToValue(InputElement{FormFieldElement{elem}})

	case InsTagName:
		return sel.rt.ToValue(InsElement{ModElement{elem}})

	case KeygenTagName:
		return sel.rt.ToValue(KeygenElement{elem})

	case LabelTagName:
		return sel.rt.ToValue(LabelElement{elem})

	case LegendTagName:
		return sel.rt.ToValue(LegendElement{elem})

	case LiTagName:
		return sel.rt.ToValue(LiElement{elem})

	case LinkTagName:
		return sel.rt.ToValue(LinkElement{elem})

	case MapTagName:
		return sel.rt.ToValue(MapElement{elem})

	case MetaTagName:
		return sel.rt.ToValue(MetaElement{elem})

	case MeterTagName:
		return sel.rt.ToValue(MeterElement{elem})

	case OListTagName:
		return sel.rt.ToValue(OListElement{elem})

	case ObjectTagName:
		return sel.rt.ToValue(ObjectElement{elem})

	case OptGroupTagName:
		return sel.rt.ToValue(OptGroupElement{elem})

	case OptionTagName:
		return sel.rt.ToValue(OptionElement{elem})

	case OutputTagName:
		return sel.rt.ToValue(OutputElement{elem})

	case ParamTagName:
		return sel.rt.ToValue(ParamElement{elem})

	case PreTagName:
		return sel.rt.ToValue(PreElement{elem})

	case ProgressTagName:
		return sel.rt.ToValue(ProgressElement{elem})

	case QuoteTagName:
		return sel.rt.ToValue(QuoteElement{elem})

	case ScriptTagName:
		return sel.rt.ToValue(ScriptElement{elem})

	case SelectTagName:
		return sel.rt.ToValue(SelectElement{elem})

	case SourceTagName:
		return sel.rt.ToValue(SourceElement{elem})

	case StyleTagName:
		return sel.rt.ToValue(StyleElement{elem})

	case TableTagName:
		return sel.rt.ToValue(TableElement{elem})

	case TableBodyTagName:
		return sel.rt.ToValue(TableBodyElement{TableSectionElement{elem}})

	case TableColTagName:
		return sel.rt.ToValue(TableColElement{elem})

	case TableDataCellTagName:
		return sel.rt.ToValue(TableDataCellElement{TableCellElement{elem}})

	case TableFootTagName:
		return sel.rt.ToValue(TableFootElement{TableSectionElement{elem}})

	case TableHeadTagName:
		return sel.rt.ToValue(TableHeadElement{TableSectionElement{elem}})

	case TableHeaderCellTagName:
		return sel.rt.ToValue(TableHeaderCellElement{TableCellElement{elem}})

	case TableRowTagName:
		return sel.rt.ToValue(TableRowElement{elem})

	case TextAreaTagName:
		return sel.rt.ToValue(TextAreaElement{elem})

	case TimeTagName:
		return sel.rt.ToValue(TimeElement{elem})

	case TitleTagName:
		return sel.rt.ToValue(TitleElement{elem})

	case UListTagName:
		return sel.rt.ToValue(UListElement{elem})

	default:
		return sel.rt.ToValue(elem)
	}
 }

func (e HrefElement) Download() string  {
 return e.attrAsString("download")
}
func (e HrefElement) ReferrerPolicy() string  {
 return e.attrAsString("referrerpolicy")
}
func (e HrefElement) Rel() string  {
 return e.attrAsString("rel")
}
func (e HrefElement) Href() string  {
 return e.attrAsString("href")
}
func (e HrefElement) Target() string  {
 return e.attrAsString("target")
}
func (e HrefElement) Type() string  {
 return e.attrAsString("type")
}
func (e HrefElement) AccessKey() string  {
 return e.attrAsString("accesskey")
}
func (e HrefElement) HrefLang() string  {
 return e.attrAsString("hreflang")
}
func (e HrefElement) Media() string  {
 return e.attrAsString("media")
}
func (e HrefElement) ToString() string  {
 return e.attrAsString("href")
}
func (e BaseElement) Href() bool  {
 return e.attrIsPresent("href")
}
func (e BaseElement) Target() bool  {
 return e.attrIsPresent("target")
}
func (e ButtonElement) AccessKey() string  {
 return e.attrAsString("accesskey")
}
func (e ButtonElement) Autofocus() bool  {
 return e.attrIsPresent("autofocus")
}
func (e ButtonElement) Disabled() bool  {
 return e.attrIsPresent("disabled")
}
func (e ButtonElement) Type() string {
 attrVal := e.attrAsString("type")
	switch attrVal {
	case "submit":
		return "submit"

	case "button":
		return "button"

	case "menu":
		return "menu"

	case "reset":
		return "reset"

	case "menu":
		return "menu"

	}
	return "submit"

}
func (e DataElement) Value() string  {
 return e.attrAsString("value")
}
func (e EmbedElement) Height() string  {
 return e.attrAsString("height")
}
func (e EmbedElement) Width() string  {
 return e.attrAsString("width")
}
func (e EmbedElement) Src() string  {
 return e.attrAsString("src")
}
func (e EmbedElement) Type() string  {
 return e.attrAsString("type")
}
func (e FieldSetElement) Disabled() bool  {
 return e.attrIsPresent("disabled")
}
func (e FieldSetElement) Name() string  {
 return e.attrAsString("name")
}
func (e FormElement) Name() string  {
 return e.attrAsString("name")
}
func (e FormElement) Target() string  {
 return e.attrAsString("target")
}
func (e FormElement) Action() string  {
 return e.attrAsString("action")
}
func (e FormElement) Enctype() string  {
 return e.attrAsString("enctype")
}
func (e FormElement) Encoding() string  {
 return e.attrAsString("enctype")
}
func (e FormElement) AcceptCharset() string  {
 return e.attrAsString("accept-charset")
}
func (e FormElement) Autocomplete() string  {
 return e.attrAsString("autocomplete")
}
func (e FormElement) NoValidate() bool  {
 return e.attrIsPresent("novalidate")
}
func (e IFrameElement) Allowfullscreen() bool  {
 return e.attrIsPresent("allowfullscreen")
}
func (e IFrameElement) ReferrerPolicy() string  {
 return e.attrAsString("referrerpolicy")
}
func (e IFrameElement) Height() string  {
 return e.attrAsString("height")
}
func (e IFrameElement) Width() string  {
 return e.attrAsString("width")
}
func (e IFrameElement) Name() string  {
 return e.attrAsString("name")
}
func (e IFrameElement) Src() string  {
 return e.attrAsString("src")
}
func (e ImageElement) CurrentSrc() string  {
 return e.attrAsString("src")
}
func (e ImageElement) Sizes() string  {
 return e.attrAsString("sizes")
}
func (e ImageElement) Srcset() string  {
 return e.attrAsString("srcset")
}
func (e ImageElement) Alt() string  {
 return e.attrAsString("alt")
}
func (e ImageElement) CrossOrigin() string {
 attrVal := e.attrAsString("crossorigin")
	switch attrVal {
	case "anonymous":
		return "anonymous"

	case "use-credentials":
		return "use-credentials"

	}
	return "anonymous"

}
func (e ImageElement) Height() int  {
 return e.attrAsInt("height", 0)
}
func (e ImageElement) Width() int  {
 return e.attrAsInt("width", 0)
}
func (e ImageElement) IsMap() bool  {
 return e.attrIsPresent("ismap")
}
func (e ImageElement) Name() string  {
 return e.attrAsString("name")
}
func (e ImageElement) Src() string  {
 return e.attrAsString("src")
}
func (e ImageElement) UseMap() string  {
 return e.attrAsString("usemap")
}
func (e InputElement) Type() string {
 attrVal := e.attrAsString("type")
	switch attrVal {
	case "text":
		return "text"

	case "button":
		return "button"

	case "checkbox":
		return "checkbox"

	case "color":
		return "color"

	case "date":
		return "date"

	case "datetime-local":
		return "datetime-local"

	case "email":
		return "email"

	case "file":
		return "file"

	case "hidden":
		return "hidden"

	case "image":
		return "image"

	case "month":
		return "month"

	case "number":
		return "number"

	case "password":
		return "password"

	case "radio":
		return "radio"

	case "range":
		return "range"

	case "reset":
		return "reset"

	case "search":
		return "search"

	case "submit":
		return "submit"

	case "tel":
		return "tel"

	case "time":
		return "time"

	case "url":
		return "url"

	case "week":
		return "week"

	}
	return "text"

}
func (e InputElement) Disabled() bool  {
 return e.attrIsPresent("disabled")
}
func (e InputElement) Autofocus() bool  {
 return e.attrIsPresent("autofocus")
}
func (e InputElement) Required() bool  {
 return e.attrIsPresent("required")
}
func (e InputElement) Value() string  {
 return e.attrAsString("value")
}
func (e ImageElement) ReferrerPolicy() string  {
 return e.attrAsString("referrerpolicy")
}
func (e InputElement) Checked() bool  {
 return e.attrIsPresent("checked")
}
func (e InputElement) DefaultChecked() bool  {
 return e.attrIsPresent("checked")
}
func (e InputElement) Alt() string  {
 return e.attrAsString("alt")
}
func (e InputElement) Src() string  {
 return e.attrAsString("src")
}
func (e InputElement) Height() string  {
 return e.attrAsString("height")
}
func (e InputElement) Width() string  {
 return e.attrAsString("width")
}
func (e InputElement) Accept() string  {
 return e.attrAsString("accept")
}
func (e InputElement) Autocomplete() string {
 attrVal := e.attrAsString("autocomplete")
	switch attrVal {
	case "off":
		return "off"

	case "on":
		return "on"

	}
	return "off"

}
func (e InputElement) MaxLength() int  {
 return e.attrAsInt("maxlength", -1)
}
func (e InputElement) Size() int  {
 return e.attrAsInt("size", 0)
}
func (e InputElement) Pattern() string  {
 return e.attrAsString("pattern")
}
func (e InputElement) Placeholder() string  {
 return e.attrAsString("placeholder")
}
func (e InputElement) Readonly() bool  {
 return e.attrIsPresent("readonly")
}
func (e InputElement) Min() string  {
 return e.attrAsString("min")
}
func (e InputElement) Max() string  {
 return e.attrAsString("max")
}
func (e InputElement) DefaultValue() string  {
 return e.attrAsString("value")
}
func (e InputElement) DirName() string  {
 return e.attrAsString("dirname")
}
func (e InputElement) AccessKey() string  {
 return e.attrAsString("accesskey")
}
func (e InputElement) Multiple() bool  {
 return e.attrIsPresent("multiple")
}
func (e InputElement) Step() string  {
 return e.attrAsString("step")
}
func (e KeygenElement) Autofocus() bool  {
 return e.attrIsPresent("autofocus")
}
func (e KeygenElement) Challenge() string  {
 return e.attrAsString("challenge")
}
func (e KeygenElement) Disabled() bool  {
 return e.attrIsPresent("disabled")
}
func (e KeygenElement) Keytype() string {
 attrVal := e.attrAsString("keytype")
	switch attrVal {
	case "RSA":
		return "RSA"

	case "DSA":
		return "DSA"

	case "EC":
		return "EC"

	}
	return "RSA"

}
func (e KeygenElement) Name() string  {
 return e.attrAsString("name")
}
func (e KeygenElement) Type() string {
 attrVal := e.attrAsString("type")
	switch attrVal {
	case "keygen":
		return "keygen"

	}
	return "keygen"

}
func (e LabelElement) HtmlFor() string  {
 return e.attrAsString("for")
}
func (e LegendElement) AccessKey() string  {
 return e.attrAsString("accesskey")
}
func (e LegendElement) Value() string  {
 return e.attrAsString("value")
}
func (e LiElement) Value() string  {
 return e.attrAsString("value")
}
func (e LiElement) Type() string {
 attrVal := e.attrAsString("type")
	switch attrVal {
	case "":
		return ""

	case "1":
		return "1"

	case "a":
		return "a"

	case "A":
		return "A"

	case "i":
		return "i"

	case "I":
		return "I"

	case "disc":
		return "disc"

	case "square":
		return "square"

	case "circle":
		return "circle"

	}
	return ""

}
func (e LinkElement) Crossorigin() string {
 attrVal := e.attrAsString("crossorigin")
	switch attrVal {
	case "anonymous":
		return "anonymous"

	case "use-credentials":
		return "use-credentials"

	}
	return "anonymous"

}
func (e LinkElement) ReferrerPolicy() string  {
 return e.attrAsString("referrerpolicy")
}
func (e LinkElement) Href() string  {
 return e.attrAsString("href")
}
func (e LinkElement) Hreflang() string  {
 return e.attrAsString("hreflang")
}
func (e LinkElement) Media() string  {
 return e.attrAsString("media")
}
func (e LinkElement) Rel() string {
 attrVal := e.attrAsString("rel")
	switch attrVal {
	case "":
		return ""

	case "alternate":
		return "alternate"

	case "author":
		return "author"

	case "dns-prefetch":
		return "dns-prefetch"

	case "help":
		return "help"

	case "icon":
		return "icon"

	case "license":
		return "license"

	case "next":
		return "next"

	case "pingback":
		return "pingback"

	case "preconnect":
		return "preconnect"

	case "prefetch":
		return "prefetch"

	case "preload":
		return "preload"

	case "prerender":
		return "prerender"

	case "prev":
		return "prev"

	case "search":
		return "search"

	case "stylesheet":
		return "stylesheet"

	}
	return ""

}
func (e LinkElement) Target() string  {
 return e.attrAsString("target")
}
func (e LinkElement) Type() string  {
 return e.attrAsString("type")
}
func (e MapElement) Name() string  {
 return e.attrAsString("name")
}
func (e MetaElement) Content() string  {
 return e.attrAsString("content")
}
func (e MetaElement) HttpEquiv() string {
 attrVal := e.attrAsString("http-equiv")
	switch attrVal {
	case "content-type":
		return "content-type"

	case "default-style":
		return "default-style"

	case "refresh":
		return "refresh"

	}
	return "content-type"

}
func (e MetaElement) Name() string {
 attrVal := e.attrAsString("name")
	switch attrVal {
	case "application-name":
		return "application-name"

	case "author":
		return "author"

	case "description":
		return "description"

	case "generator":
		return "generator"

	case "keywords":
		return "keywords"

	case "viewport":
		return "viewport"

	}
	return "application-name"

}
func (e MeterElement) Min() int  {
 return e.attrAsInt("min", 0)
}
func (e MeterElement) Max() int  {
 return e.attrAsInt("max", 0)
}
func (e MeterElement) High() int  {
 return e.attrAsInt("high", 0)
}
func (e MeterElement) Low() int  {
 return e.attrAsInt("low", 0)
}
func (e MeterElement) Optimum() int  {
 return e.attrAsInt("optimum", 0)
}
func (e ModElement) Cite() string  {
 return e.attrAsString("cite")
}
func (e ModElement) DateTime() string  {
 return e.attrAsString("datetime")
}
func (e ObjectElement) Data() string  {
 return e.attrAsString("data")
}
func (e ObjectElement) Height() string  {
 return e.attrAsString("height")
}
func (e ObjectElement) Name() string  {
 return e.attrAsString("name")
}
func (e ObjectElement) Type() string  {
 return e.attrAsString("type")
}
func (e ObjectElement) TabIndex() int  {
 return e.attrAsInt("tabindex", 0)
}
func (e ObjectElement) TypeMustMatch() bool  {
 return e.attrIsPresent("typemustmatch")
}
func (e ObjectElement) UseMap() string  {
 return e.attrAsString("usemap")
}
func (e ObjectElement) Width() string  {
 return e.attrAsString("width")
}
func (e OListElement) Reversed() bool  {
 return e.attrIsPresent("reversed")
}
func (e OListElement) Start() int  {
 return e.attrAsInt("start", 0)
}
func (e OListElement) Type() string {
 attrVal := e.attrAsString("type")
	switch attrVal {
	case "1":
		return "1"

	case "a":
		return "a"

	case "A":
		return "A"

	case "i":
		return "i"

	case "I":
		return "I"

	}
	return "1"

}
func (e OptGroupElement) Disabled() bool  {
 return e.attrIsPresent("disabled")
}
func (e OptGroupElement) Label() string  {
 return e.attrAsString("label")
}
func (e OptionElement) DefaultSelected() bool  {
 return e.attrIsPresent("selected")
}
func (e OptionElement) Selected() bool  {
 return e.attrIsPresent("selected")
}
func (e OutputElement) HtmlFor() string  {
 return e.attrAsString("for")
}
func (e OutputElement) Name() string  {
 return e.attrAsString("name")
}
func (e OutputElement) Type() string {
 attrVal := e.attrAsString("type")
	switch attrVal {
	case "output":
		return "output"

	}
	return "output"

}
func (e ParamElement) Name() string  {
 return e.attrAsString("name")
}
func (e ParamElement) Value() string  {
 return e.attrAsString("value")
}
func (e PreElement) Name() string  {
 return e.attrAsString("name")
}
func (e PreElement) Value() string  {
 return e.attrAsString("value")
}
func (e QuoteElement) Cite() string  {
 return e.attrAsString("cite")
}
func (e ScriptElement) CrossOrigin() string  {
 return e.attrAsString("crossorigin")
}
func (e ScriptElement) Type() string  {
 return e.attrAsString("type")
}
func (e ScriptElement) Src() string  {
 return e.attrAsString("src")
}
func (e ScriptElement) HtmlFor() string  {
 return e.attrAsString("for")
}
func (e ScriptElement) Charset() string  {
 return e.attrAsString("charset")
}
func (e ScriptElement) Async() bool  {
 return e.attrIsPresent("async")
}
func (e ScriptElement) Defer() bool  {
 return e.attrIsPresent("defer")
}
func (e ScriptElement) NoModule() bool  {
 return e.attrIsPresent("nomodule")
}
func (e SelectElement) Autofocus() bool  {
 return e.attrIsPresent("autofocus")
}
func (e SelectElement) Disabled() bool  {
 return e.attrIsPresent("disabled")
}
func (e SelectElement) Multiple() bool  {
 return e.attrIsPresent("multiple")
}
func (e SelectElement) Name() string  {
 return e.attrAsString("name")
}
func (e SelectElement) Required() bool  {
 return e.attrIsPresent("required")
}
func (e SourceElement) KeySystem() string  {
 return e.attrAsString("keysystem")
}
func (e SourceElement) Media() string  {
 return e.attrAsString("media")
}
func (e SourceElement) Sizes() string  {
 return e.attrAsString("sizes")
}
func (e SourceElement) Src() string  {
 return e.attrAsString("src")
}
func (e SourceElement) SrcSet() string  {
 return e.attrAsString("srcset")
}
func (e SourceElement) Type() string  {
 return e.attrAsString("type")
}
func (e StyleElement) Media() string  {
 return e.attrAsString("media")
}
func (e StyleElement) Type() string  {
 return e.attrAsString("type")
}
func (e StyleElement) Disabled() bool  {
 return e.attrIsPresent("disabled")
}
func (e TableElement) Sortable() bool  {
 return e.attrIsPresent("sortable")
}
func (e TableCellElement) ColSpan() int  {
 return e.attrAsInt("colspan", 1)
}
func (e TableCellElement) RowSpan() int  {
 return e.attrAsInt("rowspan", 1)
}
func (e TableCellElement) Headers() string  {
 return e.attrAsString("headers")
}
func (e TableHeaderCellElement) Abbr() string  {
 return e.attrAsString("abbr")
}
func (e TableHeaderCellElement) Scope() string  {
 return e.attrAsString("scope")
}
func (e TableHeaderCellElement) Sorted() bool  {
 return e.attrIsPresent("sorted")
}
func (e TextAreaElement) Type() string {
 attrVal := e.attrAsString("type")
	switch attrVal {
	case "textarea":
		return "textarea"

	}
	return "textarea"

}
func (e TextAreaElement) Value() string  {
 return e.attrAsString("value")
}
func (e TextAreaElement) DefaultValue() string  {
 return e.attrAsString("value")
}
func (e TextAreaElement) Placeholder() string  {
 return e.attrAsString("placeholder")
}
func (e TextAreaElement) Rows() int  {
 return e.attrAsInt("rows", 0)
}
func (e TextAreaElement) Cols() int  {
 return e.attrAsInt("cols", 0)
}
func (e TextAreaElement) MaxLength() int  {
 return e.attrAsInt("maxlength", 0)
}
func (e TextAreaElement) AccessKey() string  {
 return e.attrAsString("accesskey")
}
func (e TextAreaElement) ReadOnly() bool  {
 return e.attrIsPresent("readonly")
}
func (e TextAreaElement) Required() bool  {
 return e.attrIsPresent("required")
}
func (e TextAreaElement) Autocomplete() bool  {
 return e.attrIsPresent("autocomplete")
}
func (e TextAreaElement) Autocapitalize() string {
 attrVal := e.attrAsString("autocapitalize")
	switch attrVal {
	case "none":
		return "none"

	case "off":
		return "off"

	case "characters":
		return "characters"

	case "words":
		return "words"

	case "sentences":
		return "sentences"

	}
	return "none"

}
func (e TextAreaElement) Wrap() string  {
 return e.attrAsString("wrap")
}
func (e TimeElement) DateTime() string  {
 return e.attrAsString("datetime")
}
func (e TitleElement) Text() string  {
 return e.attrAsString("text")
}
func (e UListElement) Type() string  {
 return e.attrAsString("type")
}

